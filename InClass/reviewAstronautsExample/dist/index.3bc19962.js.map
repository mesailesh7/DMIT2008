{"mappings":"AEGA,MAAM,EAAmB,MAAO,CAAA,OAAE,CAAM,CAAE,IAIxC,IAAI,EAAY,CACd,KAAM,MACR,EAGI,GACF,CAAA,EAAU,MAAM,CAAG,CADrB,EAIA,QAAQ,GAAG,CAAC,GAQZ,IAAM,EAAS,IAAI,gBAAgB,GACnC,QAAQ,GAAG,CAAC,GAMZ,IAAM,EAAM,iDAA2B,EAAO,QAAQ,IAAI,CAC1D,QAAQ,GAAG,CAAC,GAKZ,IAAM,EAAW,MAAM,MAAM,EAAK,CAChC,OAAQ,KACV,GAIA,GAAI,CAAC,EAAS,EAAE,CACd,MAAM,AAAI,MAAM,2BAMlB,OAFa,MAAM,EAAS,IAAI,EAGlC,EChCM,EAAkB,AAAC,IAKrB,IAAI,EAAc,EAAc,WAAW,CAAC,EAAE,CAAC,gBAAgB,CAM3D,CAAA,KAAC,CAAI,CAAA,cAAE,CAAa,CAAA,IAAE,CAAG,CAAC,CAAG,EAEjC,MAAO,CAAC;A;AAEQ,oBAAA,EAAE,EAAc,KAAK,CAAC,aAAa,CAAC;AAC7B,2BAAA,EAAE,EAAK,EAAE,EAAE,EAAc,MAAM,CAAC,IAAI,CAAC;AACxB,wCAAA,EAAE,EAAc;A;AAE3C,aAAA,EAAE,EAAY,EAAE,EAAE,EAAc,MAAM,CAAC,MAAM,CAAC;AACrC,sBAAA,EAAE,EAAI;AACrB,OAAA,CAAC,AACR,EFhBA,IAAI,EAAa,SAAS,aAAa,CAAC,sBAExC,EAAW,gBAAgB,CAAC,SAAU,AAAC,IAErC,EAAM,cAAc,GAEpB,IAAI,EAAc,EAAW,QAAQ,CAAC,MAAS,CAE/C,QAAQ,GAAG,CAAC,EAAY,KAAK,EAE7B,EAAwB,EAAY,KAAK,CAC3C,GAGA,MAAM,EAA0B,MAAO,IAErC,IAAI,EAAyB,SAAS,aAAa,CAAC,mBAI9C,EAAO,MAAM,AAAA,EAAiB,CAClC,OAAQ,CACV,GACA,QAAQ,GAAG,CAAC,GAGZ,EAAuB,SAAS,CAAG,GAKnC,EAAK,OAAO,CAAC,GAAG,CAAC,AAAC,IAGhB,IAAI,EAAW,AAAA,EAAgB,EAE/B,CAAA,EAAuB,SAAS,EAAI,CACtC,EACF,EAGA,SAAS,gBAAgB,CAAC,mBAAoB,UAC5C,MAAM,GACR","sources":["<anon>","js/index.js","js/api/astronaut.js","js/dom/astronaut.js"],"sourcesContent":["// js here.\n\nconst $1eb1f30f33788248$var$BASE_URL = \"https://ll.thespacedevs.com/2.3.0\";\n// destructuring syntax\nconst $1eb1f30f33788248$export$64d75bfd1ddc95f4 = async ({ search: search })=>{\n    // let's get the astronaut list\n    // Async function that fetches astronaut data, accepts search parameter as an object\n    let paramsObj = {\n        mode: \"list\"\n    };\n    // If search parameter exists, add it to the parameters object\n    if (search) paramsObj.search = search;\n    console.log(paramsObj);\n    // {mode: 'list', search: 'thomas'}\n    // use a built-in called URLSearchParams to specify the url params\n    // {reminder: \"url params\"} means http://.../astonauts/?model=list\n    // Convert parameters object to URL-friendly format using URLSearchParams\n    // this is a built-in function that converts an object to a url string\n    const params = new URLSearchParams(paramsObj);\n    console.log(params);\n    // URLSearchParams {size: 2}\n    //let's define our endpoint-specific URL\n    // Construct the complete URL by combining base URL, endpoint, and parameters\n    const URL = `${$1eb1f30f33788248$var$BASE_URL}/astronauts/?${params.toString()}`;\n    console.log(URL);\n    // https://ll.thespacedevs.com/2.3.0/astronauts/?mode=list&search=thomas\n    //Hit that url asynchronously!\n    // Fetch data from the API using GET method\n    const response = await fetch(URL, {\n        method: \"GET\"\n    });\n    // let's get the json\n    // Fetch data from the API using GET method\n    // Check if the response is successful, if not throw an error\n    if (!response.ok) throw new Error(\"Error Fetching response\");\n    // Parse the JSON response into JavaScript object\n    const data = await response.json();\n    // Return the parsed data\n    return data;\n};\n\n\n/*\nHTML of an astronaut list item.\nreplace the instances that have \"THIS FORMAT HERE\" with the astronautData.\n\n<li href=\"#\" class=\"list-group-item list-group-item-action\">\n    <div class=\"d-flex w-100 justify-content-between\">\n        <img src=\"PROFILE THUMBNAIL HERE\" class=\"rounded float-start\" alt=\"\"\">\n        <h5 class=\"mb-1\">ASTRONAUT NAME (ASTRONAUT STATUS HERE)</h5>\n        <small class=\"float-end\">born DATE OF BIRTH HERE</small>\n    </div>\n    <small>ASTRONAUT NATIONALITY HERE (ASTRONAUT AGENCY NAME)</small>\n    <p class=\"mb-1\">ASTRONAUT BIO HERE </p>\n</li>\n*/ // I want you create a method called renderAstronaut\n// return the html list item\n// export that function\n// use this function in the index.js\nconst $19484cad7bd0a62e$export$2d846034c78be09b = (astronautData)=>{\n    // the astronaut data is the data from\n    // the api, change the capitalize pieces to the data.\n    // we're only going to select the first nationality here.\n    let nationality = astronautData.nationality[0].nationality_name;\n    // as an option above you could essentially map through all of\n    // the nationalities.\n    // let's use some of knowledge\n    let { name: name, date_of_birth: date_of_birth, bio: bio } = astronautData;\n    return `<li href=\"#\" class=\"list-group-item list-group-item-action\">\n      <div class=\"d-flex w-100 justify-content-between\">\n          <img src=\"${astronautData.image.thumbnail_url}\" class=\"rounded float-start\" alt=\"\"\">\n          <h5 class=\"mb-1\">${name} (${astronautData.status.name})</h5>\n          <small class=\"float-end\">born ${date_of_birth}</small>\n      </div>\n      <small>${nationality} (${astronautData.agency.abbrev})</small>\n      <p class=\"mb-1\">${bio}</p>\n  </li>`;\n};\n\n\n/*\nI want to use the api\nthe space devs\nhttps://ll.thespacedevs.com/docs/#/astronauts/astronauts_list\n\nuse the base api url\nhttps://lldev.thespacedevs.com\n\nwe have the endpoint we want to use\nhttps://lldev.thespacedevs.com/2.3.0/astronauts/?mode=list\n\n*/ // next class, we'll wrap up this example\n// by adding the search functionilty\n// using the api endpoint\n//https://lldev.thespacedevs.com/2.3.0/astronauts/?mode=detailed&search=Aldrin\n// where essentially we're adding search\n// intercept the form get the input.\nlet $e5e6023659c13c1d$var$searchForm = document.querySelector(\"#search-astronauts\");\n// add the event listener\n$e5e6023659c13c1d$var$searchForm.addEventListener(\"submit\", (event)=>{\n    // go take a look dialog html element you might not need this piece.\n    event.preventDefault();\n    // let's get the input and display it\n    let searchInput = $e5e6023659c13c1d$var$searchForm.elements[\"search\"];\n    // let's print the value out\n    console.log(searchInput.value);\n    // make the request\n    $e5e6023659c13c1d$var$loadAndRenderAstronauts(searchInput.value);\n});\n// change this function so that it can take a search parameter\nconst $e5e6023659c13c1d$var$loadAndRenderAstronauts = async (search)=>{\n    // let's select the astronaut list we'll need\n    let astronautListContainer = document.querySelector(\".astronaut-list\");\n    // perform all of the fetch that we did in\n    // the file\n    const data = await (0, $1eb1f30f33788248$export$64d75bfd1ddc95f4)({\n        search: search\n    });\n    console.log(data);\n    // we clear what's display on the page.\n    astronautListContainer.innerHTML = \"\";\n    // we are going to render these astronauts.\n    // we need to loop through the results key\n    // from the data\n    data.results.map((astronaut)=>{\n        // let's call our renderAstronaut and the\n        // the html of the list item\n        let listItem = (0, $19484cad7bd0a62e$export$2d846034c78be09b)(astronaut);\n        // let's render it to the page.\n        astronautListContainer.innerHTML += listItem;\n    });\n};\n// fire when the page is loaded\ndocument.addEventListener(\"DOMContentLoaded\", async ()=>{\n    await $e5e6023659c13c1d$var$loadAndRenderAstronauts();\n});\n\n\n//# sourceMappingURL=index.3bc19962.js.map\n","// js here.\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { getAstronautList } from \"./api/astronaut\";\nimport { renderAstronaut } from \"./dom/astronaut\";\n/*\nI want to use the api\nthe space devs\nhttps://ll.thespacedevs.com/docs/#/astronauts/astronauts_list\n\nuse the base api url\nhttps://lldev.thespacedevs.com\n\nwe have the endpoint we want to use\nhttps://lldev.thespacedevs.com/2.3.0/astronauts/?mode=list\n\n*/\n\n// next class, we'll wrap up this example\n// by adding the search functionilty\n// using the api endpoint\n//https://lldev.thespacedevs.com/2.3.0/astronauts/?mode=detailed&search=Aldrin\n// where essentially we're adding search\n\n// intercept the form get the input.\nlet searchForm = document.querySelector(\"#search-astronauts\");\n// add the event listener\nsearchForm.addEventListener(\"submit\", (event) => {\n  // go take a look dialog html element you might not need this piece.\n  event.preventDefault();\n  // let's get the input and display it\n  let searchInput = searchForm.elements[\"search\"];\n  // let's print the value out\n  console.log(searchInput.value);\n  // make the request\n  loadAndRenderAstronauts(searchInput.value);\n});\n\n// change this function so that it can take a search parameter\nconst loadAndRenderAstronauts = async (search) => {\n  // let's select the astronaut list we'll need\n  let astronautListContainer = document.querySelector(\".astronaut-list\");\n\n  // perform all of the fetch that we did in\n  // the file\n  const data = await getAstronautList({\n    search: search,\n  });\n  console.log(data);\n\n  // we clear what's display on the page.\n  astronautListContainer.innerHTML = \"\";\n\n  // we are going to render these astronauts.\n  // we need to loop through the results key\n  // from the data\n  data.results.map((astronaut) => {\n    // let's call our renderAstronaut and the\n    // the html of the list item\n    let listItem = renderAstronaut(astronaut);\n    // let's render it to the page.\n    astronautListContainer.innerHTML += listItem;\n  });\n};\n\n// fire when the page is loaded\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\n  await loadAndRenderAstronauts();\n});\n","const BASE_URL = \"https://ll.thespacedevs.com/2.3.0\";\n\n// destructuring syntax\nconst getAstronautList = async ({ search }) => {\n  // let's get the astronaut list\n  // Async function that fetches astronaut data, accepts search parameter as an object\n\n  let paramsObj = {\n    mode: \"list\",\n  };\n  // If search parameter exists, add it to the parameters object\n\n  if (search) {\n    paramsObj.search = search;\n  }\n\n  console.log(paramsObj);\n  // {mode: 'list', search: 'thomas'}\n\n  // use a built-in called URLSearchParams to specify the url params\n  // {reminder: \"url params\"} means http://.../astonauts/?model=list\n\n  // Convert parameters object to URL-friendly format using URLSearchParams\n  // this is a built-in function that converts an object to a url string\n  const params = new URLSearchParams(paramsObj);\n  console.log(params);\n  // URLSearchParams {size: 2}\n\n  //let's define our endpoint-specific URL\n  // Construct the complete URL by combining base URL, endpoint, and parameters\n\n  const URL = `${BASE_URL}/astronauts/?${params.toString()}`;\n  console.log(URL);\n  // https://ll.thespacedevs.com/2.3.0/astronauts/?mode=list&search=thomas\n  //Hit that url asynchronously!\n  // Fetch data from the API using GET method\n\n  const response = await fetch(URL, {\n    method: \"GET\",\n  });\n  // let's get the json\n  // Fetch data from the API using GET method\n  // Check if the response is successful, if not throw an error\n  if (!response.ok) {\n    throw new Error(\"Error Fetching response\");\n  }\n\n  // Parse the JSON response into JavaScript object\n  const data = await response.json();\n  // Return the parsed data\n  return data;\n};\n// Export the getAstronautList function to be used in other files\nexport { getAstronautList };\n","/*\nHTML of an astronaut list item.\nreplace the instances that have \"THIS FORMAT HERE\" with the astronautData.\n\n<li href=\"#\" class=\"list-group-item list-group-item-action\">\n    <div class=\"d-flex w-100 justify-content-between\">\n        <img src=\"PROFILE THUMBNAIL HERE\" class=\"rounded float-start\" alt=\"\"\">\n        <h5 class=\"mb-1\">ASTRONAUT NAME (ASTRONAUT STATUS HERE)</h5>\n        <small class=\"float-end\">born DATE OF BIRTH HERE</small>\n    </div>\n    <small>ASTRONAUT NATIONALITY HERE (ASTRONAUT AGENCY NAME)</small>\n    <p class=\"mb-1\">ASTRONAUT BIO HERE </p>\n</li>\n*/\n\n// I want you create a method called renderAstronaut\n// return the html list item\n// export that function\n// use this function in the index.js\nconst renderAstronaut = (astronautData) => {\n    // the astronaut data is the data from\n    // the api, change the capitalize pieces to the data.\n\n    // we're only going to select the first nationality here.\n    let nationality = astronautData.nationality[0].nationality_name\n\n    // as an option above you could essentially map through all of\n    // the nationalities.\n\n    // let's use some of knowledge\n    let {name, date_of_birth, bio} = astronautData\n\n    return `<li href=\"#\" class=\"list-group-item list-group-item-action\">\n      <div class=\"d-flex w-100 justify-content-between\">\n          <img src=\"${astronautData.image.thumbnail_url}\" class=\"rounded float-start\" alt=\"\"\">\n          <h5 class=\"mb-1\">${name} (${astronautData.status.name})</h5>\n          <small class=\"float-end\">born ${date_of_birth}</small>\n      </div>\n      <small>${nationality} (${astronautData.agency.abbrev})</small>\n      <p class=\"mb-1\">${bio}</p>\n  </li>`\n}\n\nexport {renderAstronaut}\n"],"names":["$1eb1f30f33788248$export$64d75bfd1ddc95f4","search","paramsObj","mode","console","log","params","URLSearchParams","URL","toString","response","fetch","method","ok","Error","json","$19484cad7bd0a62e$export$2d846034c78be09b","astronautData","nationality","nationality_name","name","date_of_birth","bio","image","thumbnail_url","status","agency","abbrev","$e5e6023659c13c1d$var$searchForm","document","querySelector","addEventListener","event","preventDefault","searchInput","elements","value","$e5e6023659c13c1d$var$loadAndRenderAstronauts","astronautListContainer","data","innerHTML","results","map","astronaut","listItem"],"version":3,"file":"index.3bc19962.js.map"}